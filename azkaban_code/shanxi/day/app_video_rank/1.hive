set hive.exec.dynamic.partition=true;
set hive.exec.dynamic.partition.mode=nonstrict;
set hive.groupby.orderby.position.alias=true; -- 启用别名对于groupby和orderby

-- 计算 剧集播放情况 按天
create TEMPORARY table app_video_count_day_temp as
select user_type,parent_column_id,album_id,video_id,count(distinct user_id) as user_count,sum(1) as play_count,
sum(duration) as duration,y,m,d
from app_album_play_log
where concat(y,'-',m,'-',d)>='${startDate}'
and concat(y,'-',m,'-',d)<'${endDate}' group by 1,2,3,4,y,m,d cluster by parent_column_id,2;

-- 按天统计剧集播放用户数排行榜前20
insert overwrite table app_video_user_count_rank_day
select t.t_date,user_type,t.parent_column_id,t.album_id,a.album_name,a.content_type,act.content_type_name,t.video_id,v.video_name,t.user_count,rank,t.play_count,t.duration from(
select concat(y,'-',m,'-',d) as t_date,user_type,parent_column_id,album_id,video_id,user_count,play_count,duration,
dense_rank() OVER (partition by y,m,d,user_type,parent_column_id ORDER BY user_count desc) rank from app_video_count_day_temp)t
 left join album a on a.album_id=t.album_id
 left join album_content_type act on act.content_type=a.content_type
 left join video v on v.video_id=t.video_id
 where t.rank<=20;

-- 按天统计剧集播放次数排行榜前20
insert overwrite table app_video_play_count_rank_day
select t_date,user_type,t.parent_column_id,t.album_id,a.album_name,a.content_type,act.content_type_name,t.video_id,v.video_name,t.play_count,rank,t.user_count,t.duration from(
select concat(y,'-',m,'-',d) as t_date,user_type,parent_column_id,album_id,video_id,play_count,user_count,duration,
 dense_rank() OVER (partition by y,m,d,user_type,parent_column_id ORDER BY play_count desc) rank from app_video_count_day_temp
 order by parent_column_id,play_count desc)t
 left join album a on a.album_id=t.album_id
 left join album_content_type act on act.content_type=a.content_type
 left join video v on v.video_id=t.video_id
 where t.rank<=20;



