set hive.exec.dynamic.partition=true;
set hive.exec.dynamic.partition.mode=nonstrict;
set hive.groupby.orderby.position.alias=true; -- 启用别名对于groupby和orderby
set hive.auto.convert.join = false;
-- 计算 专辑播放情况 按天

create TEMPORARY table app_album_count_day_temp as
select y,m,d,parent_column_id,album_id,count(distinct user_id) as user_count,sum(1) as play_count,
sum(duration) as duration
from app_album_play_log
where concat(y,'-',m,'-',d)>='${startDate}'
and concat(y,'-',m,'-',d)<'${endDate}' group by 1,2,3,4,5 cluster by 4,5;

-- 按天统计专辑播放用户数排行榜前20
insert overwrite table app_album_user_count_rank_day
select concat(y,'-',m,'-',d) as t_date,t.parent_column_id,t.album_id,a.album_name,a.content_type,act.content_type_name,t.user_count from(
select y,m,d,parent_column_id,album_id,user_count,
 dense_rank() OVER (partition by y,m,d,parent_column_id ORDER BY user_count desc) rank from app_album_count_day_temp)t
 left join album a on a.album_id=t.album_id
 left join album_content_type act on act.content_type=a.content_type
 where t.rank<=20;

-- 按天统计专辑播放次数排行榜前20
insert overwrite table app_album_play_count_rank_day
select concat(y,'-',m,'-',d) as t_date,t.parent_column_id,t.album_id,a.album_name,a.content_type,act.content_type_name,t.play_count from(
select y,m,d,parent_column_id,album_id,play_count,
  dense_rank() OVER (partition by y,m,d,parent_column_id ORDER BY play_count desc) rank from app_album_count_day_temp)t
 left join album a on a.album_id=t.album_id
 left join album_content_type act on act.content_type=a.content_type
  where t.rank<=20;



